"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var clientLogger = require("../helpers/clientLogger");
function clientMiddleware(client) {
    return function (store) { return function (next) { return function (action) {
        var dispatch = store.dispatch, getState = store.getState;
        if (typeof action === 'function') {
            return action(dispatch, getState);
        }
        var promise = action.promise, types = action.types, meta = action.meta, rest = __rest(action, ["promise", "types", "meta"]);
        if (!promise) {
            return next(action);
        }
        var REQUEST = types[0], SUCCESS = types[1], FAILURE = types[2];
        next(__assign(__assign({}, rest), { type: REQUEST }));
        return promise(client, store)
            .then(function (result) {
            return next(__assign(__assign({}, rest), { result: result, type: SUCCESS, meta: meta }));
        }, function (err) {
            logError(err);
            return next(__assign(__assign({}, rest), { error: err, type: FAILURE, meta: meta }));
        })
            .catch(function (err) {
            logError(err);
            return next(__assign(__assign({}, rest), { error: err, type: FAILURE, meta: meta }));
        });
    }; }; };
}
exports.clientMiddleware = clientMiddleware;
var logError = function (err) {
    try {
        if (isAuthError(err)) {
            clientLogger.log('Status 401. Server is not authorizing requests!');
        }
        else if (isValidationError(err)) {
            clientLogger.log('Server error', err);
        }
        else {
            var errorPayload = err instanceof Error ? JSON.parse(JSON.stringify(err, Object.getOwnPropertyNames(err))) : err;
            clientLogger.error('Unexpected error:', JSON.stringify(err), errorPayload);
        }
    }
    catch (er) {
        clientLogger.error('!!!THE LOGGER CRASHED!!!', err, er);
    }
};
var isAuthError = function (err) {
    var authErrorStatuses = [401, 403];
    if (!err || !err.status) {
        return false;
    }
    return authErrorStatuses.includes(err.status);
};
var isValidationError = function (err) {
    return !!err && !!err.locale;
};
//# sourceMappingURL=clientMiddleware.js.map