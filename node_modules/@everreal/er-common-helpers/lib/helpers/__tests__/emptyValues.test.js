"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var emptyValues_1 = require("../emptyValues");
describe('WHEN testing undefsafeOrDefault', function () {
    var testSandbox = function (object, path, defaultValue, expectedValue) {
        describe("WHEN calling with object: " + JSON.stringify(object) + ", path: " + JSON.stringify(path) + ", defaultValue: " + JSON.stringify(defaultValue), function () {
            it("SHOULD return " + JSON.stringify(expectedValue), function () {
                var returnValue = emptyValues_1.undefsafeOrDefault(object, path, defaultValue);
                expect(returnValue).toEqual(expectedValue);
            });
        });
    };
    testSandbox({}, 'a', [], []);
    testSandbox({}, 'a', false, false);
    testSandbox({}, 'a', ' - ', ' - ');
    testSandbox({ a: false }, 'a', ' - ', false);
    testSandbox({ a: { b: 1 } }, 'a.b', ' - ', 1);
});
describe('WHEN testing undefsafeOrDefaultArray', function () {
    var testSandbox = function (object, path, expectedValue) {
        describe("WHEN calling with object: " + JSON.stringify(object) + ", path: " + JSON.stringify(path), function () {
            it("SHOULD return " + JSON.stringify(expectedValue), function () {
                var returnValue = emptyValues_1.undefsafeOrDefaultArray(object, path);
                expect(returnValue).toEqual(expectedValue);
            });
        });
    };
    testSandbox({}, 'a', []);
    testSandbox({ a: [1, 2, 3] }, 'a', [1, 2, 3]);
});
//# sourceMappingURL=emptyValues.test.js.map