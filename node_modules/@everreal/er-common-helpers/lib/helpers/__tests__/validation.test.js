"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var uuid = require("uuid");
var validation_1 = require("../validation");
var expectValid = function (value) { return expect(value).toBe(null); };
var expectInvalid = function (value) { return expect(value).not.toBe(null); };
describe('WHEN validating integer', function () {
    it("SHOULD have '' valid", function () { return expectValid(validation_1.integer('')); });
    it("SHOULD have undefined valid", function () { return expectValid(validation_1.integer(undefined)); });
    it("SHOULD have null valid", function () { return expectValid(validation_1.integer(null)); });
    it("SHOULD have 0 valid", function () { return expectValid(validation_1.integer(0)); });
    it("SHOULD have 123 valid", function () { return expectValid(validation_1.integer(123)); });
    it("SHOULD have -123 valid", function () { return expectValid(validation_1.integer(-123)); });
    it("SHOULD have 0.123 invalid", function () { return expectInvalid(validation_1.integer(0.123)); });
    it("SHOULD have 123.123 invalid", function () { return expectInvalid(validation_1.integer(123.123)); });
    it("SHOULD have -123.123 invalid", function () { return expectInvalid(validation_1.integer(-123.123)); });
    it("SHOULD have '0' valid", function () { return expectValid(validation_1.integer('0')); });
    it("SHOULD have '123' valid", function () { return expectValid(validation_1.integer('123')); });
    it("SHOULD have '-123' valid", function () { return expectValid(validation_1.integer('-123')); });
    it("SHOULD have '0.123' invalid", function () { return expectInvalid(validation_1.integer('0.123')); });
    it("SHOULD have '123.123' invalid", function () { return expectInvalid(validation_1.integer('123.123')); });
    it("SHOULD have '-123.123' invalid", function () { return expectInvalid(validation_1.integer('-123.123')); });
    it("SHOULD have '0a' invalid", function () { return expectInvalid(validation_1.integer('0a')); });
    it("SHOULD have '0.da' invalid", function () { return expectInvalid(validation_1.integer('0.da')); });
    it("SHOULD have 'da.432' invalid", function () { return expectInvalid(validation_1.integer('da.432')); });
    it("SHOULD have 'o' invalid", function () { return expectInvalid(validation_1.integer('o')); });
    it("SHOULD have 'kjdashda' invalid", function () { return expectInvalid(validation_1.integer('kjdashda')); });
    it("SHOULD have '11 22' invalid", function () { return expectInvalid(validation_1.integer('11 22')); });
});
describe('WHEN validating integerGreaterThan', function () {
    it("SHOULD have '' valid", function () { return expectValid(validation_1.integerGreaterThan(0)('')); });
    it("SHOULD have undefined valid", function () { return expectValid(validation_1.integerGreaterThan(0)(undefined)); });
    it("SHOULD have null valid", function () { return expectValid(validation_1.integerGreaterThan(0)(null)); });
    it("SHOULD have 123 valid", function () { return expectValid(validation_1.integerGreaterThan(0)(123)); });
    it("SHOULD have '123' valid", function () { return expectValid(validation_1.integerGreaterThan(0)('123')); });
    it("SHOULD have '+00123.234' invalid", function () { return expectInvalid(validation_1.integerGreaterThan(0)('+00123.234')); });
    it("SHOULD have '123.234' invalid", function () { return expectInvalid(validation_1.integerGreaterThan(0)('123.234')); });
    it("SHOULD have 123.234 invalid", function () { return expectInvalid(validation_1.integerGreaterThan(0)(123.234)); });
    it("SHOULD have -123 invalid", function () { return expectInvalid(validation_1.integerGreaterThan(0)(-123)); });
    it("SHOULD have 0 invalid", function () { return expectInvalid(validation_1.integerGreaterThan(0)(0)); });
    it("SHOULD have '-123' invalid", function () { return expectInvalid(validation_1.integerGreaterThan(0)('-123')); });
    it("SHOULD have '0' invalid", function () { return expectInvalid(validation_1.integerGreaterThan(0)('0')); });
    it("SHOULD have '0a' invalid", function () { return expectInvalid(validation_1.integerGreaterThan(0)('0a')); });
    it("SHOULD have '0.da' invalid", function () { return expectInvalid(validation_1.integerGreaterThan(0)('0.da')); });
    it("SHOULD have 'da.432' invalid", function () { return expectInvalid(validation_1.integerGreaterThan(0)('da.432')); });
    it("SHOULD have 'o' invalid", function () { return expectInvalid(validation_1.integerGreaterThan(0)('o')); });
    it("SHOULD have 'kjdashda' invalid", function () { return expectInvalid(validation_1.integerGreaterThan(0)('kjdashda')); });
    it("SHOULD have '11 22' invalid", function () { return expectInvalid(validation_1.integerGreaterThan(0)('11 22')); });
});
describe('WHEN validating decimal', function () {
    it("SHOULD have '' valid", function () { return expectValid(validation_1.decimal('')); });
    it("SHOULD have undefined valid", function () { return expectValid(validation_1.decimal(undefined)); });
    it("SHOULD have null valid", function () { return expectValid(validation_1.decimal(null)); });
    it("SHOULD have 0 valid", function () { return expectValid(validation_1.decimal(0)); });
    it("SHOULD have -1.32 valid", function () { return expectValid(validation_1.decimal(-1.32)); });
    it("SHOULD have 123 valid", function () { return expectValid(validation_1.decimal(123)); });
    it("SHOULD have 123.234 valid", function () { return expectValid(validation_1.decimal(123.234)); });
    it("SHOULD have '0' valid", function () { return expectValid(validation_1.decimal('0')); });
    it("SHOULD have '-1.32' valid", function () { return expectValid(validation_1.decimal('-1.32')); });
    it("SHOULD have '123' valid", function () { return expectValid(validation_1.decimal('123')); });
    it("SHOULD have '123.234' valid", function () { return expectValid(validation_1.decimal('123.234')); });
    it("SHOULD have '+00123.234' valid", function () { return expectValid(validation_1.decimal('+00123.234')); });
    it("SHOULD have '0a' invalid", function () { return expectInvalid(validation_1.decimal('0a')); });
    it("SHOULD have '0.da' invalid", function () { return expectInvalid(validation_1.decimal('0.da')); });
    it("SHOULD have 'da.432' invalid", function () { return expectInvalid(validation_1.decimal('da.432')); });
    it("SHOULD have 'o' invalid", function () { return expectInvalid(validation_1.decimal('o')); });
    it("SHOULD have 'kjdashda' invalid", function () { return expectInvalid(validation_1.decimal('kjdashda')); });
    it("SHOULD have '11 22' invalid", function () { return expectInvalid(validation_1.decimal('11 22')); });
});
describe('WHEN validating decimalGreaterThan', function () {
    it("SHOULD have '' valid", function () { return expectValid(validation_1.decimalGreaterThan(0)('')); });
    it("SHOULD have undefined valid", function () { return expectValid(validation_1.decimalGreaterThan(0)(undefined)); });
    it("SHOULD have null valid", function () { return expectValid(validation_1.decimalGreaterThan(0)(null)); });
    it("SHOULD have 123 valid", function () { return expectValid(validation_1.decimalGreaterThan(0)(123)); });
    it("SHOULD have 123.234 valid", function () { return expectValid(validation_1.decimalGreaterThan(0)(123.234)); });
    it("SHOULD have '123' valid", function () { return expectValid(validation_1.decimalGreaterThan(0)('123')); });
    it("SHOULD have '123.234' valid", function () { return expectValid(validation_1.decimalGreaterThan(0)('123.234')); });
    it("SHOULD have '+00123.234' valid", function () { return expectValid(validation_1.decimalGreaterThan(0)('+00123.234')); });
    it("SHOULD have -123 invalid", function () { return expectInvalid(validation_1.decimalGreaterThan(0)(-123)); });
    it("SHOULD have 0 invalid", function () { return expectInvalid(validation_1.decimalGreaterThan(0)(0)); });
    it("SHOULD have '-123' invalid", function () { return expectInvalid(validation_1.decimalGreaterThan(0)('-123')); });
    it("SHOULD have '0' invalid", function () { return expectInvalid(validation_1.decimalGreaterThan(0)('0')); });
    it("SHOULD have '0a' invalid", function () { return expectInvalid(validation_1.decimalGreaterThan(0)('0a')); });
    it("SHOULD have '0.da' invalid", function () { return expectInvalid(validation_1.decimalGreaterThan(0)('0.da')); });
    it("SHOULD have 'da.432' invalid", function () { return expectInvalid(validation_1.decimalGreaterThan(0)('da.432')); });
    it("SHOULD have 'o' invalid", function () { return expectInvalid(validation_1.decimalGreaterThan(0)('o')); });
    it("SHOULD have 'kjdashda' invalid", function () { return expectInvalid(validation_1.decimalGreaterThan(0)('kjdashda')); });
    it("SHOULD have '11 22' invalid", function () { return expectInvalid(validation_1.decimalGreaterThan(0)('11 22')); });
});
describe('WHEN validating is24PhoneNumber', function () {
    it("SHOULD be VALID with ''", function () { return expectValid(validation_1.is24PhoneNumber('')); });
    it("SHOULD be VALID with undefined", function () { return expectValid(validation_1.is24PhoneNumber(undefined)); });
    it("SHOULD be VALID with null", function () { return expectValid(validation_1.is24PhoneNumber(null)); });
    it("SHOULD be VALID with '+49 30 570240'", function () { return expectValid(validation_1.is24PhoneNumber('+49 30 570240')); });
    it("SHOULD be VALID with '+49 8939 57012240'", function () { return expectValid(validation_1.is24PhoneNumber('+49 8939 57012240')); });
    it("SHOULD be INVALID with '+49 89 570 240'", function () { return expectInvalid(validation_1.is24PhoneNumber('+49 89 570 240')); });
    it("SHOULD be INVALID with '+49 8939 570 240'", function () { return expectInvalid(validation_1.is24PhoneNumber('+49 8939 570 240')); });
    it("SHOULD be INVALID with '089 70240'", function () { return expectInvalid(validation_1.is24PhoneNumber('095 70240')); });
    it("SHOULD be INVALID with '0049 089 570240'", function () { return expectInvalid(validation_1.is24PhoneNumber('0049 089 570240')); });
    it("SHOULD be INVALID with '0049 30 570240'", function () { return expectInvalid(validation_1.is24PhoneNumber('0049 30 570240')); });
    it("SHOULD be INVALID with '0871 96576680'", function () { return expectInvalid(validation_1.is24PhoneNumber('0871 96576680')); });
    it("SHOULD be INVALID with '047 30123 54470240'", function () { return expectInvalid(validation_1.is24PhoneNumber('0049 30 570240')); });
    it("SHOULD be INVALID with '02692 88 04 05'", function () { return expectInvalid(validation_1.is24PhoneNumber('02692 88 04 05')); });
});
describe('WHEN validating genericPhoneNumber', function () {
    it("SHOULD be VALID with ''", function () { return expectValid(validation_1.genericPhoneNumber('')); });
    it("SHOULD be VALID with undefined", function () { return expectValid(validation_1.genericPhoneNumber(undefined)); });
    it("SHOULD be VALID with null", function () { return expectValid(validation_1.genericPhoneNumber(null)); });
    it("SHOULD be VALID with '+49384'", function () { return expectValid(validation_1.genericPhoneNumber('+49384')); });
    it("SHOULD be VALID with '49893'", function () { return expectValid(validation_1.genericPhoneNumber('49893')); });
    it("SHOULD be VALID with '+49893957012240'", function () { return expectValid(validation_1.genericPhoneNumber('+49893957012240')); });
    it("SHOULD be VALID with '49893957012240'", function () { return expectValid(validation_1.genericPhoneNumber('49893957012240')); });
    it("SHOULD be INVALID with '+49 89570240'", function () { return expectInvalid(validation_1.genericPhoneNumber('+49 89570240')); });
    it("SHOULD be INVALID with 'abcd'", function () { return expectInvalid(validation_1.genericPhoneNumber('abcd')); });
    it("SHOULD be INVALID with '089 70240'", function () { return expectInvalid(validation_1.genericPhoneNumber('095 70240')); });
    it("SHOULD be INVALID with '0049 089 570240'", function () { return expectInvalid(validation_1.genericPhoneNumber('0049 089 570240')); });
    it("SHOULD be INVALID with '0049 30 570240'", function () { return expectInvalid(validation_1.genericPhoneNumber('0049 30 570240')); });
    it("SHOULD be INVALID with '0871 96576680'", function () { return expectInvalid(validation_1.genericPhoneNumber('0871 96576680')); });
    it("SHOULD be INVALID with '047 30123 54470240'", function () { return expectInvalid(validation_1.genericPhoneNumber('0049 30 570240')); });
    it("SHOULD be INVALID with '02692 88 04 05'", function () { return expectInvalid(validation_1.genericPhoneNumber('02692 88 04 05')); });
});
describe('WHEN testing isValidEmail', function () {
    var response;
    describe('WHEN testing with alias', function () {
        beforeEach(function () { return (response = validation_1.isValidEmail('tomescu.raul+alias@gmail.com')); });
        it('SHOULD return true', function () { return expect(response).toBe(true); });
    });
    describe('WHEN testing with short email', function () {
        beforeEach(function () { return (response = validation_1.isValidEmail('a@a.com')); });
        it('SHOULD return true', function () { return expect(response).toBe(true); });
    });
    describe('WHEN testing with long email with a more than 3 chars after .', function () {
        beforeEach(function () { return (response = validation_1.isValidEmail('liviu.ignat@email.com')); });
        it('SHOULD return true', function () { return expect(response).toBe(true); });
    });
});
describe('WHEN testing isValidUuid', function () {
    var response;
    describe('WHEN calling with uuid.v1()', function () {
        beforeEach(function () { return (response = validation_1.isValidUuid(uuid.v1())); });
        it('SHOULD return true', function () { return expect(response).toBe(true); });
    });
});
describe('WHEN testing inRange', function () {
    describe('WHEN calling with smaller value', function () {
        it('SHOULD return error object', function () { return expect(validation_1.inRange(0, 2000)(-1)).not.toBe(null); });
    });
    describe('WHEN calling value in range', function () {
        it('SHOULD return null', function () { return expect(validation_1.inRange(0, 2000)(2000)).toBe(null); });
    });
    describe('WHEN calling with bigger value', function () {
        it('SHOULD return error object', function () { return expect(validation_1.inRange(0, 2000)(3000)).not.toBe(null); });
    });
});
describe('WHEN testing isEmpty', function () {
    var testSandbox = function (inputValue, expectedValue) {
        describe("WHEN calling " + JSON.stringify(inputValue), function () {
            it("SHOULD return " + JSON.stringify(expectedValue), function () { return expect(validation_1.isEmpty(inputValue)).toBe(expectedValue); });
        });
    };
    testSandbox(null, true);
    testSandbox(undefined, true);
    testSandbox('', true);
    testSandbox(NaN, false);
    testSandbox(0, false);
    testSandbox(true, false);
    testSandbox(false, false);
    testSandbox({}, false);
    testSandbox('test', false);
});
describe('WHEN testing isBlob', function () {
    var testSandbox = function (inputValue, expectedValue) {
        describe("WHEN calling " + JSON.stringify(inputValue), function () {
            it("SHOULD return " + JSON.stringify(expectedValue), function () { return expect(validation_1.isBlob(inputValue)).toBe(expectedValue); });
        });
    };
    testSandbox(new Blob(['hello world']), true);
    testSandbox(undefined, false);
    testSandbox(true, false);
    testSandbox({}, false);
    testSandbox('', false);
});
describe('WHEN testing isValidDate', function () {
    var testSandbox = function (inputValue, expectedValue) {
        describe("WHEN calling " + JSON.stringify(inputValue), function () {
            it("SHOULD return " + JSON.stringify(expectedValue), function () { return expect(validation_1.isValidDate(inputValue)).toBe(expectedValue); });
        });
    };
    testSandbox(new Date(), true);
    testSandbox(new Date().toISOString(), false);
    testSandbox(new Date('abc'), false);
});
//# sourceMappingURL=validation.test.js.map