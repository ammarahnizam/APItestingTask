"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var navigation_1 = require("./../navigation");
describe('WHEN testing navigation', function () {
    var response;
    var filter = { someProp: true };
    var sort = { field: 'createdAt', direction: 'ASC' };
    var paging = {};
    describe('WHEN doing decodeQueryFilters(applyQueryFilters(url, filter, sort, paging))', function () {
        beforeEach(function () {
            response = navigation_1.decodeQueryFilters(navigation_1.applyQueryFilters('/', filter, sort, paging));
        });
        it('SHOULD should return {filter, sort, paging}', function () {
            expect(response.filter).toEqual({ someProp: 'true' });
            expect(response.sort).toEqual(sort);
            expect(response.paging).toEqual(paging);
        });
    });
    describe('WHEN doing decodeQueryFilters(/listings?availableFrom=2017-10-28T22%3A00%3A00.000Z&take=9)', function () {
        var url = '/listings?availableFrom=2017-10-28T22%3A00%3A00.000Z&take=9';
        beforeEach(function () {
            response = navigation_1.decodeQueryFilters(url);
        });
        it('SHOULD should return expected filters', function () {
            expect(response.filter.availableFrom).toBe('2017-10-28T22:00:00.000Z');
            expect(response.paging.take).toBe(9);
        });
    });
    describe('WHEN doing applyQueryFilters with filter: {someProp: true} + decodeQueryFilters(applyQueryFilters(url, {someProp: true}, sort, paging))', function () {
        beforeEach(function () {
            var url = navigation_1.applyQueryFilters('/', filter, sort, paging);
            response = navigation_1.decodeQueryFilters(navigation_1.applyQueryFilters(url, filter, sort, paging));
        });
        it('SHOULD should return {filter: {someProp: true}, sort, paging}', function () {
            expect(response.filter).toEqual({ someProp: 'true' });
            expect(response.sort).toEqual(sort);
            expect(response.paging).toEqual(paging);
        });
    });
    describe('WHEN doing applyQueryFilters with filter: {someProp: true} + applyQueryFilters(url, {someProp: true}, sort, paging)', function () {
        var url;
        beforeEach(function () {
            url = navigation_1.applyQueryFilters(navigation_1.applyQueryFilters('/', filter, {}, {}), filter, {}, {});
        });
        it('SHOULD should return /?someProp=true', function () {
            expect(url).toBe('/?someProp=true');
        });
    });
    describe('WHEN testing getUrlWithSubdomain', function () {
        it('SHOULD add www when url starts with qa and subdomain is undefined', function () {
            expect(navigation_1.getUrlWithSubdomain('http://qa.everreal.co/api/pdfservice', '')).toBe('http://qa.everreal.co/api/pdfservice');
        });
        it('SHOULD add www when url starts with qa and subdomain is undefined', function () {
            expect(navigation_1.getUrlWithSubdomain('https://qa.everreal.co', undefined)).toBe('https://qa.everreal.co');
        });
    });
});
//# sourceMappingURL=navigation.test.js.map