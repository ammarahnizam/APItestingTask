"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var qs = require("qs");
var urljoin = require("url-join");
var constants_1 = require("./constants");
function getBasePath() {
    return constants_1.APP_BASE_URL || '';
}
exports.getBasePath = getBasePath;
function getBaseUrl(url) {
    if (url === void 0) { url = ''; }
    var basePath = getBasePath();
    var baseUrl = basePath;
    if (url) {
        baseUrl = urljoin(basePath, url);
    }
    var fixedUrl = baseUrl
        .split('/')
        .filter(function (part) { return !!part; })
        .join('/');
    return "/" + fixedUrl;
}
exports.getBaseUrl = getBaseUrl;
function applyQueryFilters(url, filter, sort, paging, extraQuery) {
    if (filter === void 0) { filter = {}; }
    if (sort === void 0) { sort = {}; }
    if (paging === void 0) { paging = {}; }
    if (extraQuery === void 0) { extraQuery = {}; }
    var sortFilterPagingFromUrl = exports.decodeQueryFilters(url);
    var allFilter = __assign(__assign({}, sortFilterPagingFromUrl.filter), filter);
    var allSort = __assign(__assign({}, sortFilterPagingFromUrl.sort), sort);
    var allPaging = __assign(__assign({}, sortFilterPagingFromUrl.paging), paging);
    var urlWithoutQuery = url.split('?')[0];
    var queryParts = [];
    if (allSort && allSort.field) {
        queryParts.push("sortField=" + allSort.field);
        queryParts.push("sortDirection=" + allSort.direction);
    }
    if (allPaging && allPaging.take) {
        queryParts.push("take=" + allPaging.take);
    }
    if (allPaging && allPaging.skip) {
        queryParts.push("skip=" + allPaging.skip);
    }
    var filterAsString = qs.stringify(allFilter);
    if (filterAsString) {
        queryParts.push(filterAsString);
    }
    var extraQueryString = qs.stringify(extraQuery);
    if (extraQueryString) {
        queryParts.push(extraQueryString);
    }
    if (queryParts.length) {
        return urlWithoutQuery + "?" + queryParts.join('&');
    }
    return url;
}
exports.applyQueryFilters = applyQueryFilters;
exports.decodeQueryFilters = function (url) {
    var finalUrl = url.split('?')[1];
    if (!finalUrl) {
        return {
            filter: {},
            paging: {
                take: undefined,
                skip: undefined,
            },
            sort: {
                field: undefined,
                direction: undefined,
            },
        };
    }
    var _a = qs.parse(finalUrl) || {}, take = _a.take, skip = _a.skip, sortField = _a.sortField, sortDirection = _a.sortDirection, filter = __rest(_a, ["take", "skip", "sortField", "sortDirection"]);
    var response = {
        filter: filter,
        paging: {
            take: parseInt(take, 10) || undefined,
            skip: parseInt(skip, 10) || undefined,
        },
        sort: {
            field: sortField,
            direction: sortDirection,
        },
    };
    return response;
};
exports.getUrlWithSubdomain = function (url, subdomain) {
    if (subdomain === void 0) { subdomain = ''; }
    var http = 'http://';
    var https = 'https://';
    if (!subdomain) {
        return url;
    }
    if (url.startsWith(https)) {
        return "" + https + subdomain + "." + getMainDomain(url);
    }
    if (url.startsWith(http)) {
        return "" + http + subdomain + "." + getMainDomain(url);
    }
    return url;
};
function getMainDomain(url) {
    var http = 'http://';
    var https = 'https://';
    var urlParts = url.split('.');
    if (urlParts.length >= 2) {
        return urlParts[urlParts.length - 2].replace(http, '').replace(https, '') + "." + urlParts[urlParts.length - 1];
    }
    return url;
}
exports.getMainDomain = getMainDomain;
//# sourceMappingURL=navigation.js.map