"use strict";
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var types_1 = require("@sentry/types");
var stringifySafe_1 = require("./stringifySafe");
var isBrowser_1 = require("./isBrowser");
var types_2 = require("@sentry/types");
exports.Severity = types_2.Severity;
exports.scriptProps = {
    src: 'https://browser.sentry-cdn.com/5.15.2/bundle.min.js',
    integrity: 'sha384-HA4Glk4hAwUFBIu+OfNR4bvn6vGCxT134gRiQce9rwp2YfxcuHHG8nG7qkooJwFt',
    crossOrigin: 'anonymous',
};
var Sentry;
exports.init = function (dsn) {
    Sentry = isBrowser_1.isBrowser() && window.Sentry;
    if (Sentry) {
        Sentry.init({ dsn: dsn });
    }
};
// tslint:disable-next-line: no-console
exports.log = function (message) {
    var params = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        params[_i - 1] = arguments[_i];
    }
    return isBrowser_1.isBrowser() && console.log.apply(console, __spreadArrays([message], params));
};
exports.info = function (message) {
    var params = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        params[_i - 1] = arguments[_i];
    }
    return exports.captureMessage.apply(void 0, __spreadArrays([types_1.Severity.Info, message], params));
};
exports.warning = function (message) {
    var params = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        params[_i - 1] = arguments[_i];
    }
    return exports.captureMessage.apply(void 0, __spreadArrays([types_1.Severity.Warning, message], params));
};
exports.error = function (message) {
    var params = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        params[_i - 1] = arguments[_i];
    }
    return exports.captureMessage.apply(void 0, __spreadArrays([types_1.Severity.Error, message], params));
};
exports.addBreadcrumb = function (category, message) {
    if (!Sentry) {
        return;
    }
    Sentry.addBreadcrumb({ category: category, message: message });
};
exports.captureMessage = function (severity, message) {
    var params = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        params[_i - 2] = arguments[_i];
    }
    if (!Sentry || !isBrowser_1.isBrowser()) {
        var consoleParams = [severity, message];
        if (severity === types_1.Severity.Error) {
            // tslint:disable-next-line: no-console
            console.error.apply(console, __spreadArrays(consoleParams, params));
        }
        else {
            // tslint:disable-next-line: no-console
            console.log.apply(console, __spreadArrays(consoleParams, params));
        }
        return;
    }
    Sentry.withScope(function (scope) {
        scope.setExtra('params', stringifySafe_1.stringifySafe(params));
        Sentry.captureMessage(message, severity);
    });
};
exports.captureException = function (exception, extra) {
    if (extra === void 0) { extra = {}; }
    if (!Sentry || !isBrowser_1.isBrowser()) {
        // tslint:disable-next-line: no-console
        console.error(exports.error, extra);
        return;
    }
    Sentry.withScope(function (scope) {
        Object.entries(extra).forEach(function (_a) {
            var key = _a[0], value = _a[1];
            return scope.setExtra(key, value);
        });
        Sentry.captureException(exception);
    });
};
exports.setUserContext = function (user) {
    if (!Sentry || !isBrowser_1.isBrowser()) {
        return;
    }
    Sentry.configureScope(function (scope) {
        return scope.setUser({
            id: user.id,
        });
    });
};
//# sourceMappingURL=clientLogger.js.map