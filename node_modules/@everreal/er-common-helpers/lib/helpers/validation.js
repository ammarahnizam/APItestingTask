"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var isEmail = require("validator/lib/isEmail");
exports.join = function (rules) { return function (value, data) { return rules.map(function (rule) { return rule(value, data); }).filter(function (error) { return !!error; })[0]; }; };
exports.isEmpty = function (value) { return value === undefined || value === null || value === ''; };
exports.isInteger = function (value) { return Number.isInteger(Number(value)); };
exports.isBlob = function (data) { return !!data && typeof Blob !== 'undefined' && data instanceof Blob; };
exports.isDecimal = function (value) { return !Number.isNaN(Number(value)) && !Number.isNaN(parseFloat(value)); };
exports.isValidEmail = function (str) { return isEmail(str); };
exports.isValidDate = function (date) { return date instanceof Date && !isNaN(date.valueOf()); };
exports.isValidUuid = function (uuid) {
    var UUID_REGEX = /[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/;
    return UUID_REGEX.test(uuid);
};
function email(value) {
    if (!exports.isEmpty(value) && !exports.isValidEmail(value)) {
        return {
            key: 'validation.email.invalid',
            text: 'Invalid email address',
        };
    }
    return null;
}
exports.email = email;
function required(value) {
    if (exports.isEmpty(value)) {
        return {
            key: 'validation.required',
            text: 'Field is required',
        };
    }
    return null;
}
exports.required = required;
function requiredTrue(value) {
    if (value !== true) {
        return {
            key: 'validation.required.true',
            text: 'Field should be true',
        };
    }
    return null;
}
exports.requiredTrue = requiredTrue;
function minLength(min) {
    return function (value) {
        if (!exports.isEmpty(value) && value.length < min) {
            return {
                key: 'validation.string.min.length',
                text: "Must be at least " + min + " characters",
                values: {
                    min: min ? min.toString() : '0',
                },
            };
        }
        return null;
    };
}
exports.minLength = minLength;
function maxLength(max) {
    return function (value) {
        if (!exports.isEmpty(value) && value.length > max) {
            return {
                key: 'validation.string.max.length',
                text: "Must be no more than " + max + " characters",
                values: {
                    max: max ? max.toString() : '0',
                },
            };
        }
        return null;
    };
}
exports.maxLength = maxLength;
function integer(value) {
    var num = Number(value);
    if (exports.isEmpty(value) || exports.isInteger(num)) {
        return null;
    }
    return {
        key: 'validation.required.integer',
        text: 'Must be an integer',
    };
}
exports.integer = integer;
function is24PhoneNumber(value) {
    var is24PhoneNumberRegex = /^(?:\+49) \d{0,4} (?:\d{3,10})$/g;
    if (exports.isEmpty(value) || !!value.match(is24PhoneNumberRegex)) {
        return null;
    }
    return {
        key: 'validation.string.phoneNumber.is24.invalid',
        text: 'Must be a valid phone number',
    };
}
exports.is24PhoneNumber = is24PhoneNumber;
function genericPhoneNumber(value) {
    var genericPhoneNumberRegex = /^\+?(?:\d{5,15})$/g;
    if (exports.isEmpty(value) || !!value.match(genericPhoneNumberRegex)) {
        return null;
    }
    return {
        key: 'validation.string.phoneNumber.generic.invalid',
        text: 'Must be a valid phone number',
    };
}
exports.genericPhoneNumber = genericPhoneNumber;
function integerGreaterThan(min) {
    return function (value) {
        var num = Number(value);
        if (exports.isEmpty(value) || (exports.isInteger(num) && num > min)) {
            return null;
        }
        return {
            key: 'validation.required.integer.greater.than',
            text: 'Must be an integer and greater than {min}',
            values: {
                min: min ? min.toString() : '0',
            },
        };
    };
}
exports.integerGreaterThan = integerGreaterThan;
function decimal(value) {
    var num = Number(value);
    if (exports.isEmpty(value) || exports.isDecimal(num)) {
        return null;
    }
    return {
        key: 'validation.required.decimal',
        text: 'Must be a decimal',
    };
}
exports.decimal = decimal;
function decimalGreaterThan(min) {
    return function (value) {
        var num = Number(value);
        if (exports.isEmpty(value) || (exports.isDecimal(num) && num > min)) {
            return null;
        }
        return {
            key: 'validation.required.decimal.greater.than',
            text: 'Must be a decimal and greater than {min}',
            values: {
                min: min ? min.toString() : '0',
            },
        };
    };
}
exports.decimalGreaterThan = decimalGreaterThan;
function doubleGreaterOrEqualThan(min) {
    return function (value) {
        var num = Number(value);
        if (exports.isEmpty(value) || num >= min) {
            return null;
        }
        return {
            key: 'validation.required.number.greater.than',
            text: 'Must be a number and greater than {min}',
            values: {
                min: min ? min.toString() : '0',
            },
        };
    };
}
exports.doubleGreaterOrEqualThan = doubleGreaterOrEqualThan;
function doubleSmallerOrEqualThan(max) {
    return function (value) {
        var num = Number(value);
        if (exports.isEmpty(value) || num <= max) {
            return null;
        }
        return {
            key: 'validation.required.number.smaller.than',
            text: 'Must be a number and smaller than {max}',
            values: {
                max: max ? max.toString() : '0',
            },
        };
    };
}
exports.doubleSmallerOrEqualThan = doubleSmallerOrEqualThan;
function inRange(min, max) {
    return function (value) {
        if (!doubleSmallerOrEqualThan(max)(value) && !doubleGreaterOrEqualThan(min)(value)) {
            return null;
        }
        return {
            key: 'validation.required.number.inRange',
            text: 'Must be a number and between {min} and {max}',
            values: {
                min: min ? min.toString() : '0',
                max: max ? max.toString() : '0',
            },
        };
    };
}
exports.inRange = inRange;
function oneOf(enumeration) {
    return function (value) {
        // tslint:disable-next-line no-bitwise
        if (!~enumeration.indexOf(value)) {
            var values = enumeration.join(', ');
            return {
                key: 'validation.none.of',
                text: "Must be one of: " + values,
                values: { values: values },
            };
        }
        return null;
    };
}
exports.oneOf = oneOf;
exports.requiredArray = function (value) {
    if (Array.isArray(value) && value.filter(function (val) { return !exports.isEmpty(val); }).length) {
        return null;
    }
    return {
        text: 'Must be an array with at least one element',
        key: 'validation.required.array',
    };
};
exports.requiredImageOrFileArray = function (value) {
    // Image array can also be a single object or string
    if (typeof value === 'object' || typeof value === 'string') {
        return null;
    }
    if (Array.isArray(value) && value.filter(function (val) { return !exports.isEmpty(val); }).length) {
        return null;
    }
    return {
        text: 'Must be a file array with at least one element',
        key: 'validation.required.array.image.or.file',
    };
};
function match(field) {
    return function (value, data) {
        if (data) {
            if (value !== data[field]) {
                return {
                    key: 'validation.match.value',
                    text: 'Do not match',
                };
            }
        }
        return null;
    };
}
exports.match = match;
function repeatPasswordValidation(passwordFieldName) {
    return function (value, formData) {
        var passwordValue = formData[passwordFieldName];
        if (passwordValue && value !== passwordValue) {
            return {
                key: 'validation.repeat.password',
                text: 'Please retype correct password.',
            };
        }
        return null;
    };
}
exports.repeatPasswordValidation = repeatPasswordValidation;
function createValidator(rules) {
    return function (data) {
        if (data === void 0) { data = {}; }
        var errors = {};
        Object.keys(rules).forEach(function (key) {
            var rule = exports.join([].concat(rules[key])); // concat enables both functions and arrays of functions
            var error = rule(data[key], data);
            if (error) {
                errors[key] = error;
            }
        });
        return errors;
    };
}
exports.createValidator = createValidator;
//# sourceMappingURL=validation.js.map