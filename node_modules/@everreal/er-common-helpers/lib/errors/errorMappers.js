"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var constants_1 = require("./../helpers/constants");
var ValidationError_1 = require("./ValidationError");
function mapErrorToString(err, req) {
    if (err instanceof Error) {
        return JSON.stringify(mapErrorToJSON(err, req));
    }
    return JSON.stringify(err);
}
exports.mapErrorToString = mapErrorToString;
function mapErrorToJSON(err, _req) {
    if (isSwaggerValidationError(err)) {
        return __assign(__assign({ message: 'Failed swagger validation' }, err.results), { path: err.path });
    }
    if (err instanceof Error) {
        var propertyNames = Object.getOwnPropertyNames(err);
        var errorJsonString = JSON.stringify(err, propertyNames);
        var errorAsString = JSON.parse(errorJsonString);
        return errorAsString;
    }
    return err;
}
exports.mapErrorToJSON = mapErrorToJSON;
function formatValidationErrorResponse(err) {
    if (isSequelizeError(err)) {
        return formatSequelizeError(err);
    }
    if (isJoiError(err)) {
        return formatJoiValidationErrorResponse(err);
    }
    if (isSwaggerValidationError(err)) {
        return formatSwaggerValidationError(err);
    }
    if (err && err.name && err.name.toLowerCase() === 'error') {
        return formatValidationError(err);
    }
    if (isKnownError(err)) {
        return err;
    }
    return null;
}
exports.formatValidationErrorResponse = formatValidationErrorResponse;
function formatJoiValidationErrorResponse(err) {
    if (isJoiError(err)) {
        var firstMessage = (err.details && err.details[0]) || {};
        var locale = "any.api.validation.joi." + firstMessage.path + "." + firstMessage.type;
        var message = firstMessage.message;
        var validationError = new ValidationError_1.ValidationError(message, locale);
        return formatValidationError(validationError);
    }
    return err;
}
exports.formatJoiValidationErrorResponse = formatJoiValidationErrorResponse;
function formatSwaggerValidationError(err) {
    if (err.code === constants_1.ERROR_CODES.SCHEMA_VALIDATION_FAILED) {
        var error = err && err.results && err.results.errors && err.results.errors.length && err.results.errors[0];
        if (error && error.code) {
            var locale = "any.api.validation." + error.code;
            var path = (error.path || []).join('.');
            if (path) {
                locale = locale + "." + path;
            }
            var REQUIRED_ERROR_MESSAGE_PREFIX = 'Missing required property: ';
            if (error.message.includes(REQUIRED_ERROR_MESSAGE_PREFIX)) {
                var missingProperty = error.message.split(REQUIRED_ERROR_MESSAGE_PREFIX)[1];
                locale = missingProperty ? locale + "." + missingProperty : locale;
            }
            return formatValidationError(new ValidationError_1.ValidationError(error.message, locale));
        }
    }
    if (err.code === constants_1.ERROR_CODES.REQUIRED) {
        return formatValidationError(new ValidationError_1.ValidationError("The parameter '" + err.paramName + "' is required.", "any.api.validation.REQUIRED." + err.paramName));
    }
    return formatValidationError(new ValidationError_1.ValidationError("Unknown swagger validation error", "any.api.validation.unknown"));
}
exports.formatSwaggerValidationError = formatSwaggerValidationError;
function formatSequelizeError(err) {
    var errors = err.errors;
    var locale = 'any.api.validation.unknown';
    if (errors && errors.length && errors[0]) {
        locale = "validation." + errors[0].message.replace(new RegExp(' ', 'g'), '.');
    }
    var sequelizeError = {
        type: 'DataValidationError',
        locale: locale,
        name: err && err.name,
        errors: (errors || []).map(function (_a) {
            var message = _a.message, type = _a.type, path = _a.path;
            return ({ message: message, type: type, path: path });
        }),
    };
    return sequelizeError;
}
exports.formatSequelizeError = formatSequelizeError;
function formatValidationError(err) {
    var isValidationError = err.isValidationError, errors = err.errors;
    if (isValidationError) {
        var error = err;
        var validationError = {
            isValidationError: isValidationError,
            type: 'ValidationError',
            locale: error.errorLocale,
            error: error.errorMessage,
        };
        return validationError;
    }
    if (errors && errors.length) {
        var validationError = {
            type: 'ValidationError',
            locale: "validation." + err.errors[0].types[0],
            errors: errors.map(function (_a) {
                var field = _a.field, messages = _a.messages, types = _a.types;
                return ({ field: field, messages: messages, types: types });
            }),
        };
        return validationError;
    }
    return err;
}
exports.formatValidationError = formatValidationError;
function isSwaggerValidationError(err) {
    return err && err.code && (err.code === constants_1.ERROR_CODES.SCHEMA_VALIDATION_FAILED || err.code === constants_1.ERROR_CODES.REQUIRED);
}
exports.isSwaggerValidationError = isSwaggerValidationError;
function isSequelizeError(err) {
    return err && err.name && err.name.toLowerCase().indexOf('sequelize') > -1;
}
exports.isSequelizeError = isSequelizeError;
function isJoiError(err) {
    return err && err.isJoi;
}
exports.isJoiError = isJoiError;
function isCriticalError(err) {
    return err && err.message && err.isCriticalError;
}
exports.isCriticalError = isCriticalError;
function isKnownError(err) {
    return err && (err.isValidationError || err.isCriticalError);
}
exports.isKnownError = isKnownError;
//# sourceMappingURL=errorMappers.js.map