"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var clientLogger_1 = require("../../helpers/clientLogger");
function isAnaliticsAllowed() {
    if (!window) {
        return false;
    }
    return true;
}
function command() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    if (!isAnaliticsAllowed()) {
        return null;
    }
    if (!window.ga) {
        return null;
    }
    return window.ga.apply(window.ga, args);
}
exports.command = command;
function send(what, options) {
    return command('send', what, options);
}
exports.send = send;
function setUser(user) {
    var userId = user && user.id;
    set('userId', userId);
}
exports.setUser = setUser;
function set(key, value) {
    return command('set', key, value);
}
exports.set = set;
function sendPageview(page, title) {
    if (title === void 0) { title = page; }
    var payload = { page: page, title: title };
    return send('pageview', payload);
}
exports.sendPageview = sendPageview;
function sendEvent(_a) {
    var eventCategory = _a.eventCategory, eventAction = _a.eventAction, eventLabel = _a.eventLabel;
    var hitType = 'event';
    clientLogger_1.log('ANALYTICS sendEvent', { eventCategory: eventCategory, eventAction: eventAction, eventLabel: eventLabel });
    command('send', { hitType: hitType, eventCategory: eventCategory, eventAction: eventAction, eventLabel: eventLabel });
}
exports.sendEvent = sendEvent;
function initGoogleAnalytics(id, sets) {
    if (sets === void 0) { sets = {}; }
    if (!isAnaliticsAllowed()) {
        return;
    }
    if (window.ga && !id) {
        return;
    }
    clientLogger_1.log('ANALYTICS initGoogleAnalytics', { id: id, sets: sets });
    try {
        window.ga =
            window.ga ||
                // tslint:disable-next-line
                function () {
                    (window.ga.q = window.ga.q || []).push(arguments);
                };
        window.ga.l = +new Date(); // tslint:disable-line
    }
    catch (ex) {
        return;
    }
    window.ga('create', id, 'auto');
    var setsKeys = Object.keys(sets || {});
    for (var _i = 0, setsKeys_1 = setsKeys; _i < setsKeys_1.length; _i++) {
        var key = setsKeys_1[_i];
        set(key, setsKeys[key]);
    }
}
exports.initGoogleAnalytics = initGoogleAnalytics;
//# sourceMappingURL=googleAnalyticsService.js.map